using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Forms;
using System.Windows.Input;
using System.Xml;
using TOReportApplication.Logic;
using TOReportApplication.Logic.Enums;
using TOReportApplication.ViewModels.interfaces;
using ContextMenu = System.Windows.Controls.ContextMenu;
using MenuItem = System.Windows.Controls.MenuItem;
using UserControl = System.Windows.Controls.UserControl;

namespace TOReportApplication.Views
{

   /// <summary>
    ///     Interaction logic for AdminModeView.xaml
    /// </summary>
    public partial class AdminModeView : UserControl
    {
        private ContextMenu contextMenu;
        private XmlDocument xmldoc;
        private string fileName = "";
        private IAdminModeViewModel viewModel;
        private DataContextEnum selectedMachine;
        
        public AdminModeView()
        {
            InitializeComponent();
            DataGridName.Visibility = Visibility.Visible;
        }

        
        private void FrameworkElement_OnDataContextChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            viewModel = (IAdminModeViewModel) DataContext;
            viewModel.SearchButtonClickedAction += OnSearchButtonClicked;
        }

        private void OnSearchButtonClicked(object machine)
        {
            contextMenu = new ContextMenu();
            xmldoc = null;
            selectedMachine = (DataContextEnum)machine;
            switch (selectedMachine)
            {
                case DataContextEnum.FormViewModel:
                    fileName = "FormaKolumny.xml";
                    break;
                case DataContextEnum.BlowingMachineViewModel:
                    fileName = "SpieniarkaKolumny.xml";
                    break;
                case DataContextEnum.ContinuousBlowingMachineViewModel:
                    fileName = "SpieniarkaCiaglaKolumny.xml";
                    break;
            }

            var file = new FileInfo(fileName);
            if (!file.Exists || file.Length == 0) return;

            xmldoc = new XmlDocument();
            var fs = new FileStream(
                fileName,
                FileMode.Open, FileAccess.Read);
            xmldoc.Load(fs);
            fs.Close();
        }

        private void DataGrid_OnAutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            var displayName = GetPropertyDisplayName(e.PropertyDescriptor);
            var dataGridTextColumn = e.Column as DataGridTextColumn;
            if (e.PropertyType == typeof(DateTime))
                if (dataGridTextColumn != null)
                    dataGridTextColumn.Binding.StringFormat = "{0:dd-MM-yyyy HH:mm:ss}";

            if (!string.IsNullOrEmpty(displayName)) e.Column.Header = displayName;
        }

        private void SaveColumnsVisibilityInFile()
        {
            using (var settingwriter = new XmlTextWriter(
                fileName,
                null))
            {
                settingwriter.WriteStartDocument();
                settingwriter.WriteStartElement("Machine");
                foreach (var element in DataGridName.Columns)
                {
                    var newColumnHeader = element.Header.ToString().Replace(" ", "_").Replace("[", "_")
                        .Replace("]", "_").Replace("%", "_");
                    settingwriter.WriteStartElement(newColumnHeader);
                    settingwriter.WriteStartElement("Visibility");
                    settingwriter.WriteString(element.Visibility.ToString());
                    settingwriter.WriteEndElement();
                    settingwriter.WriteEndElement();
                }

                settingwriter.Close();
            }
        }

        private void DataGrid_OnAutoGeneratedColumns(object sender, EventArgs e)
        {
            foreach (var element in DataGridName.Columns)
            {
                element.Visibility = Visibility.Visible;
                var newColumnHeader = element.Header.ToString().Replace(" ", "_").Replace("[", "_").Replace("]", "_")
                    .Replace("%", "_");
                var menuItem = new MenuItem
                {
                    IsChecked = true,
                    Header = element.Header
                };

                contextMenu.Items.Add(menuItem);
                menuItem.Click += OnMenuItemClicked;
                menuItem.Checked += OnMenuItemChecked;
                menuItem.Unchecked += OnMenuItemUnchecked;

                if (xmldoc != null)
                {
  
                    var xmlNode = xmldoc.GetElementsByTagName(newColumnHeader);
                    var elementVisibilityText = xmlNode[0].InnerText;
                    element.Visibility = elementVisibilityText == "Visible" ? Visibility.Visible : Visibility.Hidden;
                    menuItem.IsChecked = element.Visibility == Visibility.Visible;
                }
            }

            DataGridName.Visibility = Visibility.Visible;
        }

        private void OnMenuItemUnchecked(object sender, RoutedEventArgs e)
        {
            var menuItem = sender as MenuItem;
            foreach (var column in DataGridName.Columns)
            {
                if (!column.Header.ToString().Contains(menuItem.Header.ToString())) continue;
                column.Visibility = Visibility.Hidden;
                return;
            }
        }

        private void OnMenuItemChecked(object sender, RoutedEventArgs e)
        {
            var menuItem = sender as MenuItem;
            foreach (var column in DataGridName.Columns)
            {
                if (!column.Header.ToString().Contains(menuItem.Header.ToString())) continue;
                column.Visibility = Visibility.Visible;
                return;
            }
        }

        private void OnMenuItemClicked(object sender, RoutedEventArgs e)
        {
            var menuItem = sender as MenuItem;
            if (menuItem != null) menuItem.IsChecked = !menuItem.IsChecked;
            SaveColumnsVisibilityInFile();
        }


        private void EventSetter_OnHandler(object sender, MouseButtonEventArgs e)
        {
            var columnHeader = sender as DataGridColumnHeader;
            columnHeader.ContextMenu = contextMenu;
        }

        private string GetPropertyDisplayName(object descriptor)
        {
            var pd = descriptor as PropertyDescriptor;

            if (pd != null)
            {
                // Check for DisplayName attribute and set the column header accordingly
                var displayName = pd.Attributes[typeof(DisplayNameAttribute)] as DisplayNameAttribute;

                if (displayName != null && displayName != DisplayNameAttribute.Default) return displayName.DisplayName;
            }
            else
            {
                var pi = descriptor as PropertyInfo;

                if (pi != null)
                {
                    var attributes = pi.GetCustomAttributes(typeof(DisplayNameAttribute), true);
                    for (var i = 0; i < attributes.Length; ++i)
                    {
                        var displayName = attributes[i] as DisplayNameAttribute;
                        if (displayName != null && displayName != DisplayNameAttribute.Default)
                            return displayName.DisplayName;
                    }
                }
            }

            return null;
        }

        private void AdminMode_OnUnloaded(object sender, RoutedEventArgs e)
        {
            ((IAdminModeViewModel) DataContext).Dispose();
        }


        private string SaveReportInFile()
        {
            /*          XmlDeclaration xmlDeclaration = doc.CreateXmlDeclaration("1.0", "UTF-8", null);
                        XmlElement root = doc.DocumentElement;
                        doc.InsertBefore(xmlDeclaration, root);

                        XmlElement element1 = doc.CreateElement(string.Empty, "body", string.Empty);
                        doc.AppendChild(element1);




                        foreach (var rowObject in DataGridName.Items)
                            {
                                                XmlElement element2 = doc.CreateElement(string.Empty, "Raport", string.Empty);
                                                element1.AppendChild(element2);
                                foreach (DataGridColumn column in DataGridName.Columns)
                                {
                                    if (column.Visibility == Visibility.Visible)
                                    {
                                        var correctRow = DisplayNameHelper.GetPropertyValues(rowObject, column.Header.ToString());

                                     foreach (var item in correctRow)
                                        {
                                            if (item.Key == column.Header.ToString())
                                            {
                                                XmlElement element3 = doc.CreateElement(string.Empty, column.Header.ToString()
                                                    .Replace(" ", "_")
                                                    .Replace("[", "")
                                                    .Replace("]", "")
                                                    .Replace("%", "procent"), string.Empty);

                                                XmlText text1 = doc.CreateTextNode(item.Value.ToString());
                                                element3.AppendChild(text1);
                                                element2.AppendChild(element3);
                                            }
                                        }
                                    }
                                }
                           }*/
            DataTable dt = new DataTable();
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < DataGridName.Columns.Count; i++)
            {
                if (DataGridName.Columns[i].Visibility == Visibility.Visible)
                {

                    dt.Columns.Add(DataGridName.Columns[i].Header.ToString()
                        .Replace(" ", "_")
                        .Replace("[", "")
                        .Replace("]", "")
                        .Replace("%", "procent"));
                }
            }

            foreach (var rowObject in DataGridName.Items)
            {
                DataRow datar = dt.NewRow();
                foreach (DataGridColumn column in DataGridName.Columns)
                {
                    if (column.Visibility == Visibility.Visible)
                    {
                        var correctRow = DisplayNameHelper.GetPropertyValues(rowObject, column.Header.ToString());

                        foreach (var item in correctRow)
                        {
                            if(item.Key == column.Header.ToString())
                                datar[item.Key
                                    .Replace(" ", "_")
                                .Replace("[", "")
                                .Replace("]", "")
                                .Replace("%", "procent")] = item.Value;
                        }
                    }
                }

                dt.Rows.Add(datar);
            }

            IEnumerable<string> columnNames = dt.Columns.Cast<DataColumn>().
                Select(column => column.ColumnName);
            sb.AppendLine(string.Join(";", columnNames));

            foreach (DataRow row in dt.Rows)
            {
                IEnumerable<string> fields = row.ItemArray.Select(field => field.ToString());
                sb.AppendLine(string.Join(";", fields));
            }

            return sb.ToString();
            File.WriteAllText("D:\\ApkaRaporty\\test.csv", sb.ToString());

        }

        private void ButtonBase_OnClick(object sender, RoutedEventArgs e)
        {
            var saveFileDialog1 = new SaveFileDialog { CreatePrompt = false, Filter = "Csv|*.csv", OverwritePrompt = true };
            if (saveFileDialog1.ShowDialog() == DialogResult.OK)
            {
                //XmlDocument doc = new XmlDocument();
                var dataToSave = SaveReportInFile();
                using (var file = new StreamWriter(saveFileDialog1.FileName))
                {
                  file.Write(dataToSave);
                  file.Flush();
                }
            }
        }


        private void DataGridName_OnAddingNewItem(object sender, AddingNewItemEventArgs e)
        {
          
        }
    }

}